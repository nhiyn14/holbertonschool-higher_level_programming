The ''0-add_integer'' module
======================

Using ''add_integer''
-------------------

Import ''add_integer'' from ''0-add_integer'' module:

    >>> add_integer = __import__("0-add_integer").add_integer

Now use it:

Check for 2 positive integers:
    >>> add_integer(10,4)
    14

Check for 1 positive and 1 negative integers:
    >>> add_integer(-1,15)
    14

Check for 2 negative integers:
    >>> add_integer(-10,-4)
    -14

Check for 2 positive float:
    >>> add_integer(10.02,4.44)
    14

Check for 1 positive and 1 negative float:
    >>> add_integer(1,-15.02)
    -14

Check for 2 negative float:
    >>> add_integer(-10,-4)
    -14

Check for a is positive int and no b:
    >>> add_integer(1)
    99

Check for a is negative int and no b:
    >>> add_integer(-1)
    97

Check for a is positive float and no b:
    >>> add_integer(1.14)
    99

Check for a is negative float and no b:
    >>> add_integer(-1.14)
    97

Check for a is None and b is int/float:
    >>> add_integer(None,-15.02)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Check for a is missing and b is int/float:
    >>> add_integer(,99)
    Traceback (most recent call last):
    ...
    SyntaxError: invalid syntax

Check for a is not int/float and b is int/float:
    >>> add_integer("h",-14.02)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Check for a is int/float and b is not int/float:
    >>> add_integer(-14,"nhi")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Check for both arguments are not int/float:
    >>> add_integer(-14,"nhi")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Check for no arguments passing:
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Check for more than 2 arguments passing:
    >>> add_integer(1,-15.02,1)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Check for unnecessary empty before b:
    >>> add_integer(1,            13)
    14

Check for space between argument a:
    >>> add_integer(1,1 3)
    Traceback (most recent call last):
    ...
    SyntaxError: invalid syntax

Check for a is pool and b is int/float:
    >>> add_integer(True, 14)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
